from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from keyboards.user import main_menu_kb, cancel_kb
from utils.validators import is_valid_email, is_valid_phone
from database.models import add_application
from config import ADMIN_IDS, SUPPORT_EMAIL
from aiogram import Bot
import logging

router = Router()

WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–∫—Ä—É—Ç–µ—Ä SmartHRHelperBot.\n"
    "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é.\n"
    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
)
HELP_TEXT = "‚ÑπÔ∏è –î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é'.\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ /support."
CANCEL_TEXT = "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω."

def user_info_str(user):
    return (
        f"\n========== –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start =========="
        f"\nID:           {user.id}"
        f"\nUsername:     @{user.username}"
        f"\n–ò–º—è:          {user.first_name}"
        f"\n–§–∞–º–∏–ª–∏—è:      {user.last_name}"
        f"\n–Ø–∑—ã–∫:         {user.language_code}"
        f"\n–ë–æ—Ç?:         {user.is_bot}"
        f"\n–°—Å—ã–ª–∫–∞:       tg://user?id={user.id}"
        f"\n–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç: {user}"
        f"\n====================================================\n"
    )

class ApplicationFSM(StatesGroup):
    full_name = State()
    email = State()
    phone = State()
    skills = State()
    portfolio = State()
    resume = State()

@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    logging.info(user_info_str(user))
    await message.answer(WELCOME_TEXT, reply_markup=main_menu_kb())

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_TEXT)

@router.message(Command("support"))
async def cmd_support(message: Message) -> None:
    await message.answer(f"–°–≤—è–∑—å —Å HR: {SUPPORT_EMAIL}")

@router.message(F.text == "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é")
async def start_application(message: Message, state: FSMContext):
    await state.set_state(ApplicationFSM.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=cancel_kb())

@router.message(ApplicationFSM.full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(ApplicationFSM.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

@router.message(ApplicationFSM.email)
async def process_email(message: Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=message.text)
    await state.set_state(ApplicationFSM.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")

@router.message(ApplicationFSM.phone)
async def process_phone(message: Message, state: FSMContext):
    if not is_valid_phone(message.text):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(phone=message.text)
    await state.set_state(ApplicationFSM.skills)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

@router.message(ApplicationFSM.skills)
async def process_skills(message: Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await state.set_state(ApplicationFSM.portfolio)
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ/—Ä–µ–∑—é–º–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ -):")

@router.message(ApplicationFSM.portfolio)
async def process_portfolio(message: Message, state: FSMContext):
    portfolio = message.text if message.text != '-' else None
    await state.update_data(portfolio=portfolio)
    await state.set_state(ApplicationFSM.resume)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å —Ä–µ–∑—é–º–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ -):")

@router.message(ApplicationFSM.resume)
async def process_resume(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    resume_file_id = None
    if message.document and message.document.mime_type == 'application/pdf':
        resume_file_id = message.document.file_id
    elif message.text and message.text != '-':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ä–µ–∑—é–º–µ.")
        return
    await add_application(
        user_id=message.from_user.id,
        full_name=data['full_name'],
        email=data['email'],
        phone=data['phone'],
        skills=data['skills'],
        portfolio=data.get('portfolio'),
        resume_file_id=resume_file_id
    )
    await state.clear()
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_menu_kb())
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–§–ò–û: {data['full_name']}\nEmail: {data['email']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ù–∞–≤—ã–∫–∏: {data['skills']}"
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, text)

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞"""
    await state.clear()
    await message.answer(CANCEL_TEXT, reply_markup=main_menu_kb()) 